name: Deploy App Runner Services # Name of the workflow

on:
  push:
    branches: [deploy] # Trigger workflow on git push to deploy branch
  workflow_dispatch: # Allow manual invocation of the workflow

jobs:
  deploy-server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-server-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: desafio_server
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./server
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy server to App Runner
        id: deploy-apprunner-server
        uses: awslabs/amazon-app-runner-deploy@main
        copy-env-vars: |
          MG_PASSWORD=${{ secrets.MG_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
        env:
          MG_PASSWORD: ${{ secrets.MG_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        with:
          service: app-runner-desafio-server
          image: ${{ steps.build-server-image.outputs.image }}
          access-role-arn: ${{ secrets.ROLE_ARN }}
          runtime: NODEJS_16
          region: ${{ secrets.AWS_REGION }}
          cpu: 1
          memory: 2
          port: 3000

      - name: Server App Runner output
        run: echo "App runner output ${{ steps.deploy-apprunner-server.outputs.service-id }}"

  deploy-client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-client-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: desafio_client
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./client
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy client to App Runner
        id: deploy-apprunner-client
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: app-runner-desafio-client
          image: ${{ steps.build-client-image.outputs.image }}
          access-role-arn: ${{ secrets.ROLE_ARN }}
          runtime: NODEJS_16
          region: ${{ secrets.AWS_REGION }}
          cpu: 1
          memory: 2
          port: 5173

      - name: Client App Runner output
        run: echo "App runner output ${{ steps.deploy-apprunner-client.outputs.service-id }}"
